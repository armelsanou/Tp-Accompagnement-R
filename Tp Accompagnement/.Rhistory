runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
library(shiny); runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
if
new_row["no cde Sortie"] <- givenDataFrame[i, "N..évènement"]
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(tempdF)
View(tempdF)
View(tempdF)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
remotes::install_github("dreamRs/capture")
install_github("dreamRs/capture")
install_github("dreamRs/capture")
githubinstall("dreamRs/capture")
library(githubinstall)
githubinstall("dreamRs/capture")
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
install.packages("remotes")
install.packages("remotes")
remotes::install_github("dreamRs/capture")
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('M2/TP1.R')
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
papillon
library(FactoMineR)
library(Factoshiny)
library(missMDA)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
papillon
plot(cars)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill = TRUE, header=TRUE)
papillon
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", header=FALSE)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill=TRUE, header=FALSE)
papillon
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
#papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill=TRUE, header=FALSE)
#papillon
orange <- read.table("http://factominer.free.fr/livre/orange.csv",header=TRUE, sep=";",fileEncoding = "latin1",
dec=".", row.names=1)
View(orange)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = scan("http://wikistat.fr/data/Paris2005.dat", fill=TRUE, header=FALSE)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = scan("http://wikistat.fr/data/Paris2005.dat", header=FALSE)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = scan("http://wikistat.fr/data/Paris2005.dat")
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill = TRUE, header=TRUE)
papillon
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
#papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill = TRUE, header=TRUE)
#papillon
data = read.delim("http://wikistat.fr/data/Paris2005.dat", sep=" ")
View(data)
View(papillon)
library(FactoMineR)
library(Factoshiny)
library(missMDA)
#library(FactoInvestigate)
#papillon = read.table("http://wikistat.fr/data/Paris2005.dat", fill = TRUE, header=TRUE)
#papillon
data = read.delim("http://wikistat.fr/data/Paris2005.dat", sep=" ")
View(data)
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv")
setwd(getwd())
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv")
setwd(paste0(getwd(),"/"))
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv")
path = setwd(paste0(getwd(),"/"))
path
path = setwd(paste0(getwd(),"/"))
path
path = setwd(paste0(getwd(),"/"))
path
path = setwd(paste0(getwd(),"/M2/TP Dim Red/TP Dim Red/"))
path
dir = setwd(paste0(getwd(),"/M2/TP Dim Red/TP Dim Red/"))
dir = setwd(paste0(getwd(),"/"))
dir
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv")
data
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv", sep=" ", header = TRUE)
data
View(data)
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv", sep=";", header = TRUE)
data
View(data)
View(data)
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv", sep=",", header = TRUE)
data
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.csv("FichierTp.csv", sep=" ", header = TRUE)
data
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.table("data_dim_red", sep=" ", header = TRUE)
data
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.table("data_dim_red.txt", sep=" ", header = TRUE)
data
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
#data = read.table("data_dim_red.txt", sep=" ", header = TRUE)
#data
dir
#data = read.table("http://wikistat.fr/data/Paris2005.dat", header=TRUE)
data = read.table("data_dim_red.txt", sep=" ", header = TRUE)
dir = setwd(paste0(getwd(),"/"))
data = read.table("data_dim_red.txt", header = TRUE)
data
data
View(data)
dir = setwd(paste0(getwd(),"/"))
data = read.table("data_dim_red.txt", spe=" ", header = TRUE)
data = read.table("data_dim_red.txt", header = TRUE)
dir
runApp('~/GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('~/M2/TP1.R')
runApp('~/M2/TP1.R')
runApp('~/M2/Tp Accompagnement')
install.packages("caTools")
runApp('~/M2/Tp Accompagnement')
runApp('~/M2/Tp Accompagnement')
install.packages("Gmisc")
runApp('~/M2/Tp Accompagnement')
